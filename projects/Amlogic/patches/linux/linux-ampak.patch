diff --git a/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c b/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c
index 68b6093..6959dd3 100755
--- a/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c
+++ b/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c
@@ -58,6 +58,7 @@
 static dev_t hdmitx_id;
 static struct class *hdmitx_class;
 static struct device *hdmitx_dev;
+static int bluetooth;
 
 static int set_disp_mode_auto(void);
 const vinfo_t * hdmi_get_current_vinfo(void);
@@ -555,6 +556,14 @@ static ssize_t store_cec_config(struct device * dev, struct device_attribute *at
     return count;
 }
 
+static ssize_t show_bluetooth(struct device * dev, struct device_attribute *attr, char * buf)
+{
+    int pos=0;
+    pos+=snprintf(buf+pos, PAGE_SIZE, "%d\r\n",amlogic_get_value(bluetooth,"bluetooth") );
+       printk("yxg-----read bluetooth_sate is %d\n",amlogic_get_value(bluetooth,"bluetooth"));
+    return pos;
+}
+
 static ssize_t store_cec_lang_config(struct device * dev, struct device_attribute *attr, const char * buf, size_t count)
 {
     hdmi_print(INF, CEC "store_cec_lang_config\n");
@@ -932,6 +941,7 @@ void hdmi_print(int dbg_lvl, const char *fmt, ...)
     }
 }
 
+static DEVICE_ATTR(bluetooth_state, 0666, show_bluetooth, NULL);//yxg
 static DEVICE_ATTR(disp_mode, S_IWUSR | S_IRUGO | S_IWGRP, show_disp_mode, store_disp_mode);
 static DEVICE_ATTR(aud_mode, S_IWUSR | S_IRUGO, show_aud_mode, store_aud_mode);
 static DEVICE_ATTR(edid, S_IWUSR | S_IRUGO, show_edid, store_edid);
@@ -1542,6 +1552,14 @@ static int amhdmitx_probe(struct platform_device *pdev)
     struct device_node *init_data;
 #endif
 
+    bluetooth=amlogic_gpio_name_map_num("GPIODV_25");
+    ret=amlogic_gpio_request(bluetooth, "bluetooth");
+    if (ret) {
+       dev_err(&pdev->dev, "bluetooth_dt request failed\n");
+    }
+    amlogic_set_pull_up_down(bluetooth,0,"bluetooth");
+    amlogic_gpio_direction_input(bluetooth,"bluetooth");
+
     hdmi_print(IMP, SYS "amhdmitx_probe\n");
 
     r = alloc_chrdev_region(&hdmitx_id, 0, HDMI_TX_COUNT, DEVICE_NAME);
@@ -1597,6 +1615,7 @@ static int amhdmitx_probe(struct platform_device *pdev)
     ret=device_create_file(hdmitx_dev, &dev_attr_cec);
     ret=device_create_file(hdmitx_dev, &dev_attr_cec_config);
     ret=device_create_file(hdmitx_dev, &dev_attr_cec_lang_config);
+    ret=device_create_file(hdmitx_dev, &dev_attr_bluetooth_state);
 
     if (hdmitx_dev == NULL) {
         hdmi_print(ERR, SYS "device_create create error\n");
diff --git a/drivers/amlogic/wifi/broadcom/bcmdhd_1_141_xx/dhd_config.c b/drivers/amlogic/wifi/broadcom/bcmdhd_1_141_xx/dhd_config.c
index 384d251..ea25dfb 100755
--- a/drivers/amlogic/wifi/broadcom/bcmdhd_1_141_xx/dhd_config.c
+++ b/drivers/amlogic/wifi/broadcom/bcmdhd_1_141_xx/dhd_config.c
@@ -1,6 +1,8 @@
 
 #include <typedefs.h>
 #include <osl.h>
+
+#include <linux/amlogic/aml_gpio_consumer.h>
 
 #include <bcmutils.h>
 #include <hndsoc.h>
@@ -120,6 +122,13 @@ const static char *bcm4354a1_ag_fw_name[] = {
 	"fw_bcm4354a1_ag_mfg.bin"
 };
 
+const static char *nv_name[] = {
+	"ap6210_nvram.txt",
+	"ap6330_nvram.txt",
+	"ap6181_nvram.txt",
+	"ap6212_nvram.txt",
+};
+
 #define htod32(i) i
 #define htod16(i) i
 #define dtoh32(i) i
@@ -144,6 +153,12 @@ dhd_conf_free_mac_list(wl_mac_list_ctrl_t *mac_list)
 }
 
 int
+get_wifi_type_from_gpio()
+{
+	return amlogic_get_value(amlogic_gpio_name_map_num("GPIODV_25"),"bluetooth");
+}
+
+int
 dhd_conf_get_mac(dhd_pub_t *dhd, bcmsdh_info_t *sdh, uint8 *mac)
 {
 	int i, err = -1;
@@ -423,6 +438,54 @@ dhd_conf_set_fw_name_by_chip(dhd_pub_t *dhd, char *fw_path)
 	printf("%s: firmware_path=%s\n", __FUNCTION__, fw_path);
 }
 
+void
+dhd_conf_set_nv_name_by_chip(dhd_pub_t *dhd, char *nv_path)
+{
+	uint chip, chiprev;
+	int i;
+
+	chip = dhd->conf->chip;
+	chiprev = dhd->conf->chiprev;
+
+	if (nv_path[0] == '\0') {
+#ifdef CONFIG_BCMDHD_NVRAM_PATH
+		bcm_strncpy_s(nv_path, MOD_PARAM_PATHLEN-1, CONFIG_BCMDHD_NVRAM_PATH, MOD_PARAM_PATHLEN-1);
+		if (nv_path[0] == '\0')
+#endif
+		{
+			printf("src nvram path is null\n");
+			return;
+		}
+	}
+
+#ifndef FW_PATH_AUTO_SELECT
+	return;
+#endif
+
+	/* find out the last '/' */
+	i = strlen(nv_path);
+	while (i>0){
+		if (nv_path[i] == '/') break;
+		i--;
+	}
+	switch (chip) {
+		case BCM4330_CHIP_ID:
+					strcpy(&nv_path[i+1], nv_name[1]);
+						break;
+		case BCM43362_CHIP_ID:
+				if(get_wifi_type_from_gpio())
+					strcpy(&nv_path[i+1], nv_name[2]);
+				else
+					strcpy(&nv_path[i+1], nv_name[0]);
+				break;
+		case BCM43430_CHIP_ID:
+					strcpy(&nv_path[i+1], nv_name[3]);
+						break;
+	
+	}
+	printf("%s: yxg ----nv_path=%s\n", __FUNCTION__, nv_path);
+}
+
 #if defined(HW_OOB)
 void
 dhd_conf_set_hw_oob_intr(bcmsdh_info_t *sdh, uint chip)
diff --git a/drivers/amlogic/wifi/broadcom/bcmdhd_1_141_xx/dhd_config.h b/drivers/amlogic/wifi/broadcom/bcmdhd_1_141_xx/dhd_config.h
index e95fdd1..a03a2ff 100755
--- a/drivers/amlogic/wifi/broadcom/bcmdhd_1_141_xx/dhd_config.h
+++ b/drivers/amlogic/wifi/broadcom/bcmdhd_1_141_xx/dhd_config.h
@@ -10,6 +10,7 @@
 
 #define FW_PATH_AUTO_SELECT 1
 extern char firmware_path[MOD_PARAM_PATHLEN];
+extern char nvram_path[MOD_PARAM_PATHLEN];
 extern int disable_proptx;
 extern uint dhd_doflow;
 
@@ -105,6 +106,7 @@ typedef struct dhd_conf {
 void dhd_conf_set_fw_name_by_mac(dhd_pub_t *dhd, bcmsdh_info_t *sdh, char *fw_path);
 void dhd_conf_set_nv_name_by_mac(dhd_pub_t *dhd, bcmsdh_info_t *sdh, char *nv_path);
 void dhd_conf_set_fw_name_by_chip(dhd_pub_t *dhd, char *fw_path);
+void dhd_conf_set_nv_name_by_chip(dhd_pub_t *dhd, char *nv_path);
 #if defined(HW_OOB)
 void dhd_conf_set_hw_oob_intr(bcmsdh_info_t *sdh, uint chip);
 #endif
diff --git a/drivers/amlogic/wifi/broadcom/bcmdhd_1_141_xx/dhd_sdio.c b/drivers/amlogic/wifi/broadcom/bcmdhd_1_141_xx/dhd_sdio.c
index 998a52f..10262dc 100755
--- a/drivers/amlogic/wifi/broadcom/bcmdhd_1_141_xx/dhd_sdio.c
+++ b/drivers/amlogic/wifi/broadcom/bcmdhd_1_141_xx/dhd_sdio.c
@@ -7661,6 +7661,7 @@ dhdsdio_download_firmware(struct dhd_bus *bus, osl_t *osh, void *sdh)
 	dhd_conf_preinit(bus->dhd);
 	dhd_conf_read_config(bus->dhd);
 	dhd_conf_set_fw_name_by_chip(bus->dhd, bus->fw_path);
+	dhd_conf_set_nv_name_by_chip(bus->dhd, bus->nv_path);
 	dhd_conf_set_fw_path(bus->dhd, bus->fw_path);
 	dhd_conf_set_nv_path(bus->dhd, bus->nv_path);
 	dhd_conf_set_fw_name_by_mac(bus->dhd, bus->sdh, bus->fw_path);
